{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "数据工厂名称",
			"defaultValue": "traininglakehousedfiwm"
		},
		"eventtrigger1_properties_CopyFileTriggerPipeline_parameters_sourceFolder": {
			"type": "string",
			"defaultValue": "@triggerBody().event.data.sourceFolder"
		},
		"eventtrigger1_properties_CopyFileTriggerPipeline_parameters_sourceFile": {
			"type": "string",
			"defaultValue": "@triggerBody().event.data.sourceFile"
		},
		"eventtrigger1_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/0a21caed-1eab-441f-b72c-d646963f9800/resourceGroups/training_rg/providers/Microsoft.EventGrid/topics/esalesiwm"
		},
		"storage_event_trigger_properties_CopyFileTriggerPipeline_parameters_sourceFolder": {
			"type": "string",
			"defaultValue": "@triggerBody().folderPath"
		},
		"storage_event_trigger_properties_CopyFileTriggerPipeline_parameters_sourceFile": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"storage_event_trigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/0a21caed-1eab-441f-b72c-d646963f9800/resourceGroups/training_rg/providers/Microsoft.Storage/storageAccounts/traininglakehouseiwm"
		},
		"electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_STORAGE_ACCOUNT": {
			"type": "string",
			"defaultValue": "traininglakehouseiwm"
		},
		"electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_BRONZE_LAYER_NAMESPACE": {
			"type": "string",
			"defaultValue": "bronze"
		},
		"electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_STORE_SALES_FOLDER": {
			"type": "string",
			"defaultValue": "sales"
		},
		"electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_TABLE_LIST": {
			"type": "string",
			"defaultValue": "products,store_customers,store_orders"
		},
		"electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_CURRENCY_LIST": {
			"type": "string",
			"defaultValue": "CAD,INR,EUR"
		},
		"electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_CURRENCY_FOLDER": {
			"type": "string",
			"defaultValue": "currency"
		},
		"electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_GEOLOCATION_FOLDER": {
			"type": "string",
			"defaultValue": "geolocation"
		},
		"electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_LOGS_FOLDER": {
			"type": "string",
			"defaultValue": "logs"
		},
		"electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_ECOMM_FOLDER": {
			"type": "string",
			"defaultValue": "esalesns/esaleshub/*/*/*/*/*/*/*"
		},
		"electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_EXT_TAB_FILE_FORMAT": {
			"type": "string",
			"defaultValue": "parquetformat"
		},
		"electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_EXT_DATA_SOURCE": {
			"type": "string",
			"defaultValue": "trainingds"
		},
		"electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_EXT_CREDENTIALS": {
			"type": "string",
			"defaultValue": "trainingcreds"
		},
		"electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_EXT_TAB_LOCATION": {
			"type": "string",
			"defaultValue": "https://traininglakehouseiwm.blob.core.windows.net"
		},
		"electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_SILVER_LAYER_NAMESPACE": {
			"type": "string",
			"defaultValue": "silver"
		},
		"electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_GOLD_LAYER_NAMESPACE": {
			"type": "string",
			"defaultValue": "gold"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MoviesSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglakehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "movie/output",
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "restsource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "convert?q=USD_@{item().Currency}&compact=ultra&apiKey=pr_000cd4ac1446438d9f7d5e9bba83a888",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesDelimitedText')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglakehouse",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileExt": {
						"type": "string",
						"defaultValue": "csv"
					},
					"FileTime": {
						"type": "string",
						"defaultValue": "@pipeline().TriggerTime"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat(dataset().FileTime,'.',dataset().FileExt)",
							"type": "Expression"
						},
						"folderPath": {
							"value": "sales/@{activity('Lookup Old Watermark').output.firstRow.table_name}/@{formatDateTime(utcnow(),'yyyy')}/@{formatDateTime(utcnow(),'MM')}/@{formatDateTime(utcnow(),'dd')}/@{formatDateTime(utcnow(),'HH')}",
							"type": "Expression"
						},
						"fileSystem": "bronze"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TrackingJSON')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "websitetrackinglogs",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "ecommercelogsiwm"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TrackingJSONSync')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglakehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "logs/@{formatDateTime(utcnow(),'yyyy')}/@{formatDateTime(utcnow(),'MM')}/@{formatDateTime(utcnow(),'dd')}/@{formatDateTime(utcnow(),'HH')}",
							"type": "Expression"
						},
						"fileSystem": "bronze"
					}
				},
				"schema": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/gold_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "traininglakehouse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "external",
						"fileSystem": "gold"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/salesdbds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "salesdbsource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/salesdbds_customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "salesdbsource",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "customer_name",
						"type": "varchar"
					},
					{
						"name": "address",
						"type": "varchar"
					},
					{
						"name": "city",
						"type": "varchar"
					},
					{
						"name": "postalcode",
						"type": "varchar"
					},
					{
						"name": "country",
						"type": "varchar"
					},
					{
						"name": "phone",
						"type": "varchar"
					},
					{
						"name": "email",
						"type": "varchar"
					},
					{
						"name": "credit_card",
						"type": "varchar"
					},
					{
						"name": "updated_at",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "store_customers"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFileTriggerPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DynamicFile",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": {
										"value": "@pipeline().parameters.sourceFolder",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.sourceFile",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceFolder": {
						"type": "string"
					},
					"sourceFile": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/electroniz_aggregation_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will aggregate data from the sales database, currency conversion, geo-location, and ecommerce website tracking.",
				"activities": [
					{
						"name": "Get Secret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://trainingkv100iwm.vault.azure.net/secrets/ADLSSASKEY/9f528c65ff94459297ed50218e181e7e?api-version=7.0",
							"method": "GET",
							"headers": {},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Drop Gold Layer Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Get Secret",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[drop_gold_tables]",
							"storedProcedureParameters": {
								"goldns": {
									"value": {
										"value": "@pipeline().parameters.GOLD_LAYER_NAMESPACE",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Synapse Serverless",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Create Synapse Credentials",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Drop Gold Layer Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[create_synapse_creds]",
							"storedProcedureParameters": {
								"format": {
									"value": {
										"value": "@pipeline().parameters.EXT_TAB_FILE_FORMAT",
										"type": "Expression"
									},
									"type": "String"
								},
								"extds": {
									"value": {
										"value": "@pipeline().parameters.EXT_DATA_SOURCE",
										"type": "Expression"
									},
									"type": "String"
								},
								"creds": {
									"value": {
										"value": "@pipeline().parameters.EXT_CREDENTIALS",
										"type": "Expression"
									},
									"type": "String"
								},
								"secret": {
									"value": {
										"value": "@activity('Get Secret').output.value",
										"type": "Expression"
									},
									"type": "String"
								},
								"location": {
									"value": {
										"value": "@pipeline().parameters.EXT_TAB_LOCATION",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Synapse Serverless",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Create Silver Layer Views",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Create Synapse Credentials",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[create_silver_views]",
							"storedProcedureParameters": {
								"silverns": {
									"value": {
										"value": "@pipeline().parameters.SILVER_LAYER_NAMESPACE",
										"type": "Expression"
									},
									"type": "String"
								},
								"location": {
									"value": {
										"value": "@pipeline().parameters.EXT_TAB_LOCATION",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Synapse Serverless",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Cleanup Gold Data",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Create Silver Layer Views",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "gold_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Gold Layer Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Cleanup Gold Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[create_gold_tables]",
							"storedProcedureParameters": {
								"goldns": {
									"value": {
										"value": "@pipeline().parameters.GOLD_LAYER_NAMESPACE",
										"type": "Expression"
									},
									"type": "String"
								},
								"format": {
									"value": {
										"value": "@pipeline().parameters.EXT_TAB_FILE_FORMAT",
										"type": "Expression"
									},
									"type": "String"
								},
								"extds": {
									"value": {
										"value": "@pipeline().parameters.EXT_DATA_SOURCE",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Synapse Serverless",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"EXT_TAB_FILE_FORMAT": {
						"type": "string"
					},
					"EXT_DATA_SOURCE": {
						"type": "string"
					},
					"EXT_CREDENTIALS": {
						"type": "string"
					},
					"SILVER_LAYER_NAMESPACE": {
						"type": "string"
					},
					"GOLD_LAYER_NAMESPACE": {
						"type": "string"
					},
					"EXT_TAB_LOCATION": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T03:01:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/gold_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/electroniz_aggregation_pipeline_nosecret')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will aggregate data from the sales database, currency conversion, geo-location, and ecommerce website tracking.",
				"activities": [
					{
						"name": "Drop Gold Layer Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[drop_gold_tables]",
							"storedProcedureParameters": {
								"goldns": {
									"value": {
										"value": "@pipeline().parameters.GOLD_LAYER_NAMESPACE",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Synapse Serverless",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Create Synapse Credentials",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Drop Gold Layer Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[create_synapse_creds]",
							"storedProcedureParameters": {
								"format": {
									"value": {
										"value": "@pipeline().parameters.EXT_TAB_FILE_FORMAT",
										"type": "Expression"
									},
									"type": "String"
								},
								"extds": {
									"value": {
										"value": "@pipeline().parameters.EXT_DATA_SOURCE",
										"type": "Expression"
									},
									"type": "String"
								},
								"creds": {
									"value": {
										"value": "@pipeline().parameters.EXT_CREDENTIALS",
										"type": "Expression"
									},
									"type": "String"
								},
								"secret": {
									"value": "?sv=2020-08-04&ss=bfqt&srt=sco&sp=rwdlacupx&se=2025-01-14T14:06:54Z&st=2022-01-14T06:06:54Z&spr=https,http&sig=JvjqZfcB40hT%2FJd1EqwZNIGHJdLhNni1IWreOqad2l4%3D",
									"type": "String"
								},
								"location": {
									"value": {
										"value": "@pipeline().parameters.EXT_TAB_LOCATION",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Synapse Serverless",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Create Silver Layer Views",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Create Synapse Credentials",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[create_silver_views]",
							"storedProcedureParameters": {
								"silverns": {
									"value": {
										"value": "@pipeline().parameters.SILVER_LAYER_NAMESPACE",
										"type": "Expression"
									},
									"type": "String"
								},
								"location": {
									"value": {
										"value": "@pipeline().parameters.EXT_TAB_LOCATION",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Synapse Serverless",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Cleanup Gold Data",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Create Silver Layer Views",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "gold_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Create Gold Layer Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Cleanup Gold Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[create_gold_tables]",
							"storedProcedureParameters": {
								"goldns": {
									"value": {
										"value": "@pipeline().parameters.GOLD_LAYER_NAMESPACE",
										"type": "Expression"
									},
									"type": "String"
								},
								"format": {
									"value": {
										"value": "@pipeline().parameters.EXT_TAB_FILE_FORMAT",
										"type": "Expression"
									},
									"type": "String"
								},
								"extds": {
									"value": {
										"value": "@pipeline().parameters.EXT_DATA_SOURCE",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Synapse Serverless",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"EXT_TAB_FILE_FORMAT": {
						"type": "string"
					},
					"EXT_DATA_SOURCE": {
						"type": "string"
					},
					"EXT_CREDENTIALS": {
						"type": "string"
					},
					"SILVER_LAYER_NAMESPACE": {
						"type": "string"
					},
					"GOLD_LAYER_NAMESPACE": {
						"type": "string"
					},
					"EXT_TAB_LOCATION": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T03:01:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/gold_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/electroniz_batch_ingestion_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will ingest data from sales database, currency conversion, geo-location, and ecommerce website tracking",
				"activities": [
					{
						"name": "Get Geo-location Mapping",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "GeoDelimitedTextSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "GeoDelimitedTextSync",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Find SalesDB Tables",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Geo-location Mapping",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT QUOTENAME(table_schema)+'.'+QUOTENAME(table_name) AS Table_Name FROM information_Schema.tables WHERE table_name not in ('watermarktable', 'database_firewall_rules','ipv6_database_firewall_rules')",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "salesdbds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Find SalesDB Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Find SalesDB Tables').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Lookup Old Watermark",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM [dbo].[watermarktable] AS WatermarkValue WHERE table_name='@{item().Table_Name}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "salesdbds",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Lookup New Watermark",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT MAX(updated_at) as NewWatermarkvalue FROM @{item().Table_Name}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "salesdbds",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Copy Table Data",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Lookup Old Watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Lookup New Watermark",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM @{item().Table_Name} WHERE updated_at > '@{activity('Lookup Old Watermark').output.firstRow.watermark_value}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "salesdbds",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "SalesDelimitedText",
											"type": "DatasetReference",
											"parameters": {
												"FileExt": "csv",
												"FileTime": "@pipeline().TriggerTime"
											}
										}
									]
								},
								{
									"name": "Update Watermark",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Table Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_write_watermark]",
										"storedProcedureParameters": {
											"LastModifiedtime": {
												"value": {
													"value": "@{activity('Lookup New Watermark').output.firstRow.NewWatermarkvalue}",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"TableName": {
												"value": {
													"value": "@{activity('Lookup Old Watermark').output.firstRow.table_name}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "salesdbsource",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Find Currencies",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "For Each Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DISTINCT currency FROM [dbo].[store_orders] WHERE currency <> 'USD'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "salesdbds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Currency",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Find Currencies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Find Currencies').output.value",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "Get Currency Value",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "RestResource1",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "CurrencyDelimitedText",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Copy Website Tracking Data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "For Each Currency",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false,
									"prefix": "electroniz_access"
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "TrackingJSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TrackingJSONSync",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete Website Tracking Logs",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy Website Tracking Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "TrackingJSON",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T03:01:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/salesdbds')]",
				"[concat(variables('factoryId'), '/datasets/TrackingJSON')]",
				"[concat(variables('factoryId'), '/datasets/TrackingJSONSync')]",
				"[concat(variables('factoryId'), '/datasets/SalesDelimitedText')]",
				"[concat(variables('factoryId'), '/datasets/RestResource1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/movies_ingestion_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ingestion moview",
				"activities": [
					{
						"name": "Get Movies",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "MoviesDelimitedTextSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MoviesDelimitedTextSync",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Get MoviesDB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "MoviesDBDelimitedText",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MoviesDBDelimitedTextLH",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/customer_powerquery')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "salesdbds_customer",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> salesdbds_customer",
							"dataset": {
								"referenceName": "salesdbds_customer",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared salesdbds_customer = let\r\n  AdfDoc = Sql.Database(\"salesdb111.database.windows.net\", \"salesdb\", [CreateNavigationProperties = false]),\r\n  InputTable = AdfDoc{[Schema = \"dbo\", Item = \"store_customers\"]}[Data]\r\nin\r\n  InputTable;\r\nshared UserQuery = let\r\n  Source = salesdbds_customer,\r\n  已删除列 = Table.RemoveColumns(Source, {\"credit_card\"}),\r\n  分组的行 = Table.Group(已删除列, {\"country\"}, {{\"country_cnt\", each Table.RowCount(_), Int64.Type}})\r\nin\r\n  分组的行;\r\n",
					"documentLocale": "en-us"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/salesdbds_customer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mvdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDBDelimitedTextLH",
								"type": "DatasetReference"
							},
							"name": "MoviesDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MoviesSink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "FilterYears"
						},
						{
							"name": "AggregateComedyRatings"
						}
					],
					"script": "source(output(\n\t\tmovie as integer,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as short,\n\t\tRating as short,\n\t\tRottenTomato as short\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tignoreNoFilesFound: false) ~> MoviesDB\nMoviesDB filter(toInteger(year) >= 1910 && toInteger(year) <= 2000 && rlike(genres, 'Comedy')) ~> FilterYears\nFilterYears aggregate(groupBy(year),\n\tAverageComedyRating = avg(toInteger(Rating))) ~> AggregateComedyRatings\nAggregateComedyRatings sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransformMovies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetAndTransMovies",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "mvdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesDB": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/mvdataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/electroniz_master_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline runs the ingestion, curation, and aggregation pipeline.",
				"activities": [
					{
						"name": "Run electroniz_batch_ingestion_pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "electroniz_batch_ingestion_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Run electroniz_curation_pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Run electroniz_batch_ingestion_pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "electroniz_curation_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"STORAGE_ACCOUNT": {
									"value": "@pipeline().parameters.STORAGE_ACCOUNT",
									"type": "Expression"
								},
								"BRONZE_LAYER_NAMESPACE": {
									"value": "@pipeline().parameters.BRONZE_LAYER_NAMESPACE",
									"type": "Expression"
								},
								"SILVER_LAYER_NAMESPACE": {
									"value": "@pipeline().parameters.SILVER_LAYER_NAMESPACE",
									"type": "Expression"
								},
								"STORE_SALES_FOLDER": {
									"value": "@pipeline().parameters.STORE_SALES_FOLDER",
									"type": "Expression"
								},
								"ADLS_FOLDER": {
									"value": "@{formatDateTime(utcnow(),'yyyy')}/@{formatDateTime(utcnow(),'MM')}/@{formatDateTime(utcnow(),'dd')}/@{formatDateTime(utcnow(),'HH')}",
									"type": "Expression"
								},
								"TABLE_LIST": {
									"value": "@pipeline().parameters.TABLE_LIST",
									"type": "Expression"
								},
								"CURRENCY_LIST": {
									"value": "@pipeline().parameters.CURRENCY_LIST",
									"type": "Expression"
								},
								"CURRENCY_FOLDER": {
									"value": "@pipeline().parameters.CURRENCY_FOLDER",
									"type": "Expression"
								},
								"GEOLOCATION_FOLDER": {
									"value": "@pipeline().parameters.GEOLOCATION_FOLDER",
									"type": "Expression"
								},
								"LOGS_FOLDER": {
									"value": "@pipeline().parameters.LOGS_FOLDER",
									"type": "Expression"
								},
								"ECOMM_FOLDER": {
									"value": "@pipeline().parameters.ECOMM_FOLDER",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Run electroniz_aggregation_pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Run electroniz_curation_pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "electroniz_aggregation_pipeline_nosecret",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EXT_TAB_FILE_FORMAT": {
									"value": "@pipeline().parameters.EXT_TAB_FILE_FORMAT",
									"type": "Expression"
								},
								"EXT_DATA_SOURCE": {
									"value": "@pipeline().parameters.EXT_DATA_SOURCE",
									"type": "Expression"
								},
								"EXT_CREDENTIALS": {
									"value": "@pipeline().parameters.EXT_CREDENTIALS",
									"type": "Expression"
								},
								"SILVER_LAYER_NAMESPACE": {
									"value": "@pipeline().parameters.SILVER_LAYER_NAMESPACE",
									"type": "Expression"
								},
								"GOLD_LAYER_NAMESPACE": {
									"value": "@pipeline().parameters.GOLD_LAYER_NAMESPACE",
									"type": "Expression"
								},
								"EXT_TAB_LOCATION": {
									"value": "@pipeline().parameters.EXT_TAB_LOCATION",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"STORAGE_ACCOUNT": {
						"type": "string"
					},
					"BRONZE_LAYER_NAMESPACE": {
						"type": "string"
					},
					"STORE_SALES_FOLDER": {
						"type": "string"
					},
					"TABLE_LIST": {
						"type": "string"
					},
					"CURRENCY_LIST": {
						"type": "string"
					},
					"CURRENCY_FOLDER": {
						"type": "string"
					},
					"GEOLOCATION_FOLDER": {
						"type": "string"
					},
					"LOGS_FOLDER": {
						"type": "string"
					},
					"ECOMM_FOLDER": {
						"type": "string"
					},
					"EXT_TAB_FILE_FORMAT": {
						"type": "string"
					},
					"EXT_DATA_SOURCE": {
						"type": "string"
					},
					"EXT_CREDENTIALS": {
						"type": "string"
					},
					"EXT_TAB_LOCATION": {
						"type": "string"
					},
					"SILVER_LAYER_NAMESPACE": {
						"type": "string"
					},
					"GOLD_LAYER_NAMESPACE": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2022-01-21T03:01:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/electroniz_batch_ingestion_pipeline')]",
				"[concat(variables('factoryId'), '/pipelines/electroniz_aggregation_pipeline_nosecret')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eventtrigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CopyFileTriggerPipeline",
							"type": "PipelineReference"
						},
						"parameters": {
							"sourceFolder": "[parameters('eventtrigger1_properties_CopyFileTriggerPipeline_parameters_sourceFolder')]",
							"sourceFile": "[parameters('eventtrigger1_properties_CopyFileTriggerPipeline_parameters_sourceFile')]"
						}
					}
				],
				"type": "CustomEventsTrigger",
				"typeProperties": {
					"subjectEndsWith": "",
					"subjectBeginsWith": "factories",
					"scope": "[parameters('eventtrigger1_properties_typeProperties_scope')]",
					"events": [
						"copyCompleted",
						"copySucceeded"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyFileTriggerPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/storage_event_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "存储文件触发",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CopyFileTriggerPipeline",
							"type": "PipelineReference"
						},
						"parameters": {
							"sourceFolder": "[parameters('storage_event_trigger_properties_CopyFileTriggerPipeline_parameters_sourceFolder')]",
							"sourceFile": "[parameters('storage_event_trigger_properties_CopyFileTriggerPipeline_parameters_sourceFile')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/scratch/blobs/",
					"blobPathEndsWith": ".csv",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('storage_event_trigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated",
						"Microsoft.Storage.BlobDeleted"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyFileTriggerPipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/electroniz_master_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "electroniz_master_pipeline",
							"type": "PipelineReference"
						},
						"parameters": {
							"STORAGE_ACCOUNT": "[parameters('electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_STORAGE_ACCOUNT')]",
							"BRONZE_LAYER_NAMESPACE": "[parameters('electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_BRONZE_LAYER_NAMESPACE')]",
							"STORE_SALES_FOLDER": "[parameters('electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_STORE_SALES_FOLDER')]",
							"TABLE_LIST": "[parameters('electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_TABLE_LIST')]",
							"CURRENCY_LIST": "[parameters('electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_CURRENCY_LIST')]",
							"CURRENCY_FOLDER": "[parameters('electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_CURRENCY_FOLDER')]",
							"GEOLOCATION_FOLDER": "[parameters('electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_GEOLOCATION_FOLDER')]",
							"LOGS_FOLDER": "[parameters('electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_LOGS_FOLDER')]",
							"ECOMM_FOLDER": "[parameters('electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_ECOMM_FOLDER')]",
							"EXT_TAB_FILE_FORMAT": "[parameters('electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_EXT_TAB_FILE_FORMAT')]",
							"EXT_DATA_SOURCE": "[parameters('electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_EXT_DATA_SOURCE')]",
							"EXT_CREDENTIALS": "[parameters('electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_EXT_CREDENTIALS')]",
							"EXT_TAB_LOCATION": "[parameters('electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_EXT_TAB_LOCATION')]",
							"SILVER_LAYER_NAMESPACE": "[parameters('electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_SILVER_LAYER_NAMESPACE')]",
							"GOLD_LAYER_NAMESPACE": "[parameters('electroniz_master_trigger_properties_electroniz_master_pipeline_parameters_GOLD_LAYER_NAMESPACE')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2022-01-17T03:28:00Z",
						"endTime": "2022-01-17T06:28:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/electroniz_master_pipeline')]"
			]
		}
	]
}